import fs from 'node:fs/promises'
import path from 'node:path'

/**
 * Moves all build artifacts from the dist directory into a svelte subdirectory.
 *
 * This function reorganizes the build output by:
 * 1. Creating a `/dist/svelte` directory if it doesn't exist
 * 2. Moving all files from `/dist` to `/dist/svelte`
 * 3. Preserving the file structure and names during the move
 */
async function moveSvelteDistFiles() {
  const distDir = path.join(import.meta.dirname, '/dist')
  const svelteDir = path.join(distDir, '/svelte')

  try {
    // Ensure the svelte directory exists
    await fs.mkdir(svelteDir, { recursive: true })

    // Read the files in the dist directory
    const files = await fs.readdir(distDir)

    // Move each file to the svelte directory
    for (let file of files) {
      const currentPath = path.join(distDir, file)
      const targetPath = path.join(svelteDir, file)

      // To avoid moving the 'svelte' directory into itself
      if (file !== 'svelte') {
        await fs.rename(currentPath, targetPath)
      }
    }

    console.log(`All files moved successfully to ${svelteDir}`)
  } catch (error) {
    console.error('moveSvelteDistFiles: An error occurred:', error.message)
  }
}

/**
 * Removes the temporary `.svelte-kit` directory generated during the build process.
 *
 * The `.svelte-kit` directory is created by the `svelte-package` command during
 * the build process and contains temporary files that are not needed in the
 * final distribution. This function safely removes it to clean up the workspace.
 */
async function deleteSvelteKitFolder() {
  const svelteKitDir = path.join(import.meta.dirname, './.svelte-kit')

  // Delete the .svelte-kit directory generated by `svelte-package`
  await fs.rm(svelteKitDir, { recursive: true, force: true })

  console.log(`${svelteKitDir} deleted`)
}

moveSvelteDistFiles()
deleteSvelteKitFolder()
